{"version":3,"sources":["components/Wrapper/index.js","components/Nav/index.js","components/Jumbotron/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Nav","message","score","topScore","Jumbotron","Card","id","key","onClick","handleCardClick","alt","name","src","url","App","state","images","pastSelections","includes","incorrect","correct","console","log","push","setState","shuffle","imagesArray","i","length","j","Math","floor","random","this","map","image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4/BAWeA,MARf,SAAkBC,GACd,OACI,yBAAKC,UAAU,qBACND,EAAME,WCSRC,MAbf,SAAcH,GACV,OACI,6BACI,yBAAKC,UAAU,0CACX,0BAAMA,UAAU,wBAAhB,qBACA,8BAAM,4BAAKD,EAAMI,UACjB,0BAAMH,UAAU,eAAhB,UAAsCD,EAAMK,MAA5C,iBAAiEL,EAAMM,aCKxEC,MAXf,WACI,OAEI,yBAAKN,UAAU,aACX,wBAAIA,UAAU,aAAd,qBACA,uBAAGA,UAAU,QAAb,6F,MCSGO,MAbf,SAAeR,GACX,OACI,yBAAKC,UAAU,YACZ,yBAAKA,UAAU,OAAOQ,GAAIT,EAAMS,GAAIC,IAAMV,EAAMS,GAAIE,QAAS,kBAAMX,EAAMY,gBAAgBZ,EAAMS,MAC9F,yBAAKR,UAAU,iBACX,yBAAKY,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,UCmFlCC,E,2MAjFbC,MAAQ,CACNC,OAAQA,EACRd,MAAO,EACPD,QAAS,YACTE,SAAU,EACVc,eAAgB,I,EAGlBR,gBAAkB,SAAAH,GAGhB,EAAKS,MAAME,eAAeC,SAASZ,GACjC,EAAKa,YACL,EAAKC,QAAQd,I,EAIjBc,QAAU,SAAAd,GACRe,QAAQC,IAAI,aAGZ,EAAKP,MAAME,eAAeM,KAAKjB,GAC/B,EAAKkB,SAAS,CACZtB,MAAO,EAAKa,MAAMb,MAAQ,EAC1BD,QAAS,yBAIX,EAAKwB,QAAQ,EAAKV,MAAMC,S,EAG1BG,UAAY,WACVE,QAAQC,IAAI,iBAGZ,EAAKE,SAAS,CACZtB,MAAO,EACPD,QAAS,+BAGX,EAAKwB,QAAQ,EAAKV,MAAMC,S,EAG1BS,QAAU,SAAAC,GAGR,IAAK,IAAIC,EAAID,EAAYE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADK,EAEZ,CACjCD,EAAYG,GACZH,EAAYC,IAFbD,EAAYC,GAFkC,KAE9BD,EAAYG,GAFkB,KAOjD,EAAKL,SAAS,CAACR,OAAQU,K,wEAGf,IAAD,OAEP,OADAL,QAAQC,IAAIN,GACJ,yBAAKlB,UAAU,OACrB,kBAAC,EAAD,CACEG,QAASgC,KAAKlB,MAAMd,QACpBC,MAAO+B,KAAKlB,MAAMb,MAClBC,SAAU8B,KAAKlB,MAAMZ,WACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG8B,KAAKlB,MAAMC,OAAOkB,KAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACE1B,gBAAiB,EAAKA,gBACtBH,GAAI6B,EAAM7B,GACVC,IAAK4B,EAAM7B,GACXK,KAAMwB,EAAMxB,KACZE,IAAKsB,EAAMtB,e,GAxELuB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e37ca977.chunk.js","sourcesContent":["import React from 'react'; \nimport \"./style.css\";\n\nfunction Wrapper (props) {\n    return (\n        <div className=\"wrapper container\">\n                {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Nav (props) {\n    return (\n        <div>\n            <nav className=\"navbar navbar-light bg-light fixed-top\">\n                <span className=\"navbar-brand mb-0 h1\">React Memory Game</span>\n                <span><h3>{props.message}</h3></span>\n                <span className=\"float-right\">Score: {props.score} | Top Score: {props.topScore}</span>\n            </nav>\n        </div>\n    )\n\n}\n\nexport default Nav;","import React from \"react\";\n\nfunction Jumbotron () {\n    return (\n        \n        <div className=\"jumbotron\">\n            <h1 className=\"display-4\">React Memory Game</h1>\n            <p className=\"lead\">Can you beat your high score? Click a picture to get started. But don't click it again!</p>\n        </div>\n        \n    )\n}\n\nexport default Jumbotron; ","import React from 'react';\nimport \"./style.css\";\n\nfunction Card (props) {\n    return(\n        <div className=\"d-inline\">\n           <div className=\"card\" id={props.id} key= {props.id} onClick={() => props.handleCardClick(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.url} />\n            </div>\n        </div> \n        </div>\n        \n    )\n}\n\nexport default Card;","import React from 'react';\nimport './App.css';\nimport images from './images.json';\nimport Wrapper from './components/Wrapper';\nimport Nav from './components/Nav';\nimport Jumbotron from './components/Jumbotron';\nimport Card from './components/Card';\n\n\nclass App extends React.Component {\n  state = {\n    images: images,\n    score: 0,\n    message: 'Play now!', \n    topScore: 0,\n    pastSelections: []\n  }\n\n  handleCardClick = id => {\n    // check if inside past selection\n    // call correct / incorrect\n    this.state.pastSelections.includes(id) ? \n      this.incorrect() :\n      this.correct(id) \n    \n  }\n\n  correct = id =>{\n    console.log('well done');\n    // score up\n    // msg change\n    this.state.pastSelections.push(id);\n    this.setState({\n      score: this.state.score + 1,\n      message: 'Correct! Keep it up!'\n    })\n    \n    // call shuffle\n    this.shuffle(this.state.images);\n  }\n\n  incorrect = () =>{\n    console.log('alright buddy');\n    // reset score to 0 \n    // msg change\n    this.setState({\n      score: 0,\n      message: 'Wrong! Time to start over!',\n    });\n    \n    this.shuffle(this.state.images);\n\n  }\n  shuffle = imagesArray => {\n    // rearrange cards\n    // set to state\n    for (let i = imagesArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [imagesArray[i], imagesArray[j]] = [\n        imagesArray[j],\n        imagesArray[i]\n      ];\n    };\n    this.setState({images: imagesArray});\n  }\n  \n  render() {\n    console.log(images);\n    return (<div className=\"App\">\n      <Nav \n        message={this.state.message}\n        score={this.state.score}\n        topScore={this.state.topScore} /> \n      <Jumbotron /> \n      <Wrapper>\n        {this.state.images.map(image => (\n          <Card \n            handleCardClick={this.handleCardClick}\n            id={image.id}\n            key={image.id}\n            name={image.name}\n            url={image.url}\n          />\n        ))}\n      </Wrapper>\n      \n    </div>\n  )\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}